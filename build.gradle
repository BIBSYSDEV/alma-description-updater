plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.owasp.dependencycheck' version '6.3.0'
    id 'nebula.lint' version '17.2.3'
}

group 'no.unit.alma'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation group: 'org.marc4j', name: 'marc4j', version: '2.9.2'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.10.0'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
    implementation group: 'software.amazon.awssdk', name: 'secretsmanager', version: '2.17.46'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.12.75'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: '1.12.75'
    implementation group: 'com.github.BIBSYSDEV', name: 'marc21-xml-parser', version: '2.11.3'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.32'
    implementation group: 'com.github.bibsysdev', name: 'core', version: '1.12.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.8.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    shadowJar {
        archiveClassifier.set('')
        zip64 true
    }
}

test {
    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}

// We don't want a jar, just a fatJar
jar.enabled = false
project.tasks.build.dependsOn project.tasks.shadowJar

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacoco {
    toolVersion = "0.8.5"
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }
    }
}
